// Autogenerated from Pigeon (v0.1.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface FLTDevicesMessage ()
+(FLTDevicesMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTConnectMessage ()
+(FLTConnectMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTIsConnectedMessage ()
+(FLTIsConnectedMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTLoadMediaMessage ()
+(FLTLoadMediaMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTSeekMessage ()
+(FLTSeekMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTIsPlayingMessage ()
+(FLTIsPlayingMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTPositionMessage ()
+(FLTPositionMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTDevicesMessage
+(FLTDevicesMessage*)fromMap:(NSDictionary*)dict {
  FLTDevicesMessage* result = [[FLTDevicesMessage alloc] init];
  result.devicesData = dict[@"devicesData"];
  if ((NSNull *)result.devicesData == [NSNull null]) {
    result.devicesData = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.devicesData ? self.devicesData : [NSNull null]), @"devicesData", nil];
}
@end

@implementation FLTConnectMessage
+(FLTConnectMessage*)fromMap:(NSDictionary*)dict {
  FLTConnectMessage* result = [[FLTConnectMessage alloc] init];
  result.deviceId = dict[@"deviceId"];
  if ((NSNull *)result.deviceId == [NSNull null]) {
    result.deviceId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.deviceId ? self.deviceId : [NSNull null]), @"deviceId", nil];
}
@end

@implementation FLTIsConnectedMessage
+(FLTIsConnectedMessage*)fromMap:(NSDictionary*)dict {
  FLTIsConnectedMessage* result = [[FLTIsConnectedMessage alloc] init];
  result.isConnected = dict[@"isConnected"];
  if ((NSNull *)result.isConnected == [NSNull null]) {
    result.isConnected = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isConnected ? self.isConnected : [NSNull null]), @"isConnected", nil];
}
@end

@implementation FLTLoadMediaMessage
+(FLTLoadMediaMessage*)fromMap:(NSDictionary*)dict {
  FLTLoadMediaMessage* result = [[FLTLoadMediaMessage alloc] init];
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.descr = dict[@"descr"];
  if ((NSNull *)result.descr == [NSNull null]) {
    result.descr = nil;
  }
  result.studio = dict[@"studio"];
  if ((NSNull *)result.studio == [NSNull null]) {
    result.studio = nil;
  }
  result.thumbnailUrl = dict[@"thumbnailUrl"];
  if ((NSNull *)result.thumbnailUrl == [NSNull null]) {
    result.thumbnailUrl = nil;
  }
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  result.autoPlay = dict[@"autoPlay"];
  if ((NSNull *)result.autoPlay == [NSNull null]) {
    result.autoPlay = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.url ? self.url : [NSNull null]), @"url", (self.title ? self.title : [NSNull null]), @"title", (self.descr ? self.descr : [NSNull null]), @"descr", (self.studio ? self.studio : [NSNull null]), @"studio", (self.thumbnailUrl ? self.thumbnailUrl : [NSNull null]), @"thumbnailUrl", (self.position ? self.position : [NSNull null]), @"position", (self.autoPlay ? self.autoPlay : [NSNull null]), @"autoPlay", nil];
}
@end

@implementation FLTSeekMessage
+(FLTSeekMessage*)fromMap:(NSDictionary*)dict {
  FLTSeekMessage* result = [[FLTSeekMessage alloc] init];
  result.relative = dict[@"relative"];
  if ((NSNull *)result.relative == [NSNull null]) {
    result.relative = nil;
  }
  result.interval = dict[@"interval"];
  if ((NSNull *)result.interval == [NSNull null]) {
    result.interval = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.relative ? self.relative : [NSNull null]), @"relative", (self.interval ? self.interval : [NSNull null]), @"interval", nil];
}
@end

@implementation FLTIsPlayingMessage
+(FLTIsPlayingMessage*)fromMap:(NSDictionary*)dict {
  FLTIsPlayingMessage* result = [[FLTIsPlayingMessage alloc] init];
  result.isPlaying = dict[@"isPlaying"];
  if ((NSNull *)result.isPlaying == [NSNull null]) {
    result.isPlaying = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isPlaying ? self.isPlaying : [NSNull null]), @"isPlaying", nil];
}
@end

@implementation FLTPositionMessage
+(FLTPositionMessage*)fromMap:(NSDictionary*)dict {
  FLTPositionMessage* result = [[FLTPositionMessage alloc] init];
  result.position = dict[@"position"];
  if ((NSNull *)result.position == [NSNull null]) {
    result.position = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.position ? self.position : [NSNull null]), @"position", nil];
}
@end

void FLTVideoCastApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTVideoCastApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.initialize"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initialize:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.startDeviceDiscovery"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startDeviceDiscovery:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.discoverDevices"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTDevicesMessage *output = [api discoverDevices:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.getCurrentDevice"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTDevicesMessage *output = [api getCurrentDevice:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.connect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTConnectMessage *input = [FLTConnectMessage fromMap:message];
        [api connect:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.disconnect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnect:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.isConnected"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIsConnectedMessage *output = [api isConnected:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.loadMedia"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTLoadMediaMessage *input = [FLTLoadMediaMessage fromMap:message];
        [api loadMedia:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.play"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api play:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.pause"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pause:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.stop"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stop:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.seek"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTSeekMessage *input = [FLTSeekMessage fromMap:message];
        [api seek:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.isPlaying"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTIsPlayingMessage *output = [api isPlaying:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoCastApi.getPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTPositionMessage *output = [api getPosition:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
