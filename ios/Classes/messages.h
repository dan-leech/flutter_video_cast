// Autogenerated from Pigeon (v0.1.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FLTDevicesMessage;
@class FLTConnectMessage;
@class FLTIsConnectedMessage;
@class FLTLoadMediaMessage;
@class FLTSeekMessage;
@class FLTIsPlayingMessage;
@class FLTPositionMessage;

@interface FLTDevicesMessage : NSObject
@property(nonatomic, copy, nullable) NSString * devicesData;
@end

@interface FLTConnectMessage : NSObject
@property(nonatomic, copy, nullable) NSString * deviceId;
@end

@interface FLTIsConnectedMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * isConnected;
@end

@interface FLTLoadMediaMessage : NSObject
@property(nonatomic, copy, nullable) NSString * url;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * descr;
@property(nonatomic, copy, nullable) NSString * studio;
@property(nonatomic, copy, nullable) NSString * thumbnailUrl;
@property(nonatomic, strong, nullable) NSNumber * position;
@property(nonatomic, strong, nullable) NSNumber * autoPlay;
@end

@interface FLTSeekMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * relative;
@property(nonatomic, strong, nullable) NSNumber * interval;
@end

@interface FLTIsPlayingMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * isPlaying;
@end

@interface FLTPositionMessage : NSObject
@property(nonatomic, strong, nullable) NSNumber * position;
@end

@protocol FLTVideoCastApi
-(void)initialize:(FlutterError *_Nullable *_Nonnull)error;
-(void)startDeviceDiscovery:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTDevicesMessage *)discoverDevices:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTDevicesMessage *)getCurrentDevice:(FlutterError *_Nullable *_Nonnull)error;
-(void)connect:(FLTConnectMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)disconnect:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTIsConnectedMessage *)isConnected:(FlutterError *_Nullable *_Nonnull)error;
-(void)loadMedia:(FLTLoadMediaMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(void)play:(FlutterError *_Nullable *_Nonnull)error;
-(void)pause:(FlutterError *_Nullable *_Nonnull)error;
-(void)stop:(FlutterError *_Nullable *_Nonnull)error;
-(void)seek:(FLTSeekMessage*)input error:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTIsPlayingMessage *)isPlaying:(FlutterError *_Nullable *_Nonnull)error;
-(nullable FLTPositionMessage *)getPosition:(FlutterError *_Nullable *_Nonnull)error;
-(void)androidOpenMediaRouter:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTVideoCastApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTVideoCastApi> _Nullable api);

NS_ASSUME_NONNULL_END
